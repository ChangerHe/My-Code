什么是模块化?
	


为什么要使用模块化?

	由于JS开始的项目越来越复杂,引入的文件越来越多,如果还是像原始的方式引入会让代码承受很大的风险,维护成本特别高

	所以,可以让代码实现模块化,从而解决命名冲突/文件依赖问题/顺序问题

模块化的演变:

	1.模块模式--孵化期

		之前使用命名空间的目的是为了避免全局污染,但是过长的命名,代价也太大了.

	2.模块的各种标杆的出台--过渡期

		在2010年左右,因为变量的命名空间,及文件依赖的顺序问题,往往让许多前端工程师甚为头痛.

		在过渡期,许许多多的机构都在出台自己的标准,用于解决,之前的变量的命名空间的问题.

		其中比较主流的办法就是,使用IIFE,也就是自执行函数对其中的方法进行封装,但是这样的做法存在问题,就是我们的依赖必须要按顺序进行加载,否则会出现问题.

		雅虎的工程师在2010年左右推出了YUI3,通过沙箱机制,对需要的依赖直接进行引入,这样就避免了命名空间及文件依赖问题

	3.现代的文件模块化机制

		CMD: 对应的模块载入框架(此规范的最佳实践者)Sea.js
			由国内淘宝技术专家玉伯所设计和开发 
			define(function(require, exports, modules) {
				var a = require('a')
				a.doSomething()

				var b = require('b')
				b.doSomething()
			})

		AMD: 对应的模块载入框架(require.js), AMD规范的最佳实践者
			属于国外的程序猿所开发,在国外比较流行,出现比sea.js早
			require(['a', 'b'], function(a, b) {
				a.doSomething()
				b.doSomething()
			})


使用require.js的原因:
	
	使用require.js进行模块化,从而实现异步加载代码,不会导致阻塞的出现(当程序执行到alert或confirm等时,会阻塞后面的代码的执行.)

	



